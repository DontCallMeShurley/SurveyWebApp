// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey_app.Data;

#nullable disable

namespace Survey_app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230425063540_remove required fields")]
    partial class removerequiredfields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Survey_app.Models.Answer_type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Answer_types");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date_of_birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Lecturers_post_ID")
                        .HasColumnType("int");

                    b.Property<string>("Second_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sex_type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Lecturers_post_ID");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers_post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Lecturers_posts");
                });

            modelBuilder.Entity("Survey_app.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Roles_types")
                        .HasColumnType("int");

                    b.Property<string>("Second_name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Sex_type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Survey_app.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Question_types")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Survey_app.Models.Questions_answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Questions_Id")
                        .HasColumnType("int");

                    b.Property<int>("Survey_answers_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Questions_Id");

                    b.HasIndex("Survey_answers_Id");

                    b.ToTable("Questions_answers");
                });

            modelBuilder.Entity("Survey_app.Models.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Person_ID")
                        .HasColumnType("int");

                    b.Property<int>("Students_groups_ID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Person_ID");

                    b.HasIndex("Students_groups_ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Survey_app.Models.Students_groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Creation_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("University_campus_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("University_campus_Id");

                    b.ToTable("Students_groups");
                });

            modelBuilder.Entity("Survey_app.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Survey_app.Models.Subjects_lecturers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Lecturers_Id")
                        .HasColumnType("int");

                    b.Property<int>("Subject_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Lecturers_Id");

                    b.HasIndex("Subject_Id");

                    b.ToTable("Subjects_lecturers");
                });

            modelBuilder.Entity("Survey_app.Models.Subjects_students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Students_groups_Id")
                        .HasColumnType("int");

                    b.Property<int>("Subjects_lecturers_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Students_groups_Id");

                    b.HasIndex("Subjects_lecturers_Id");

                    b.ToTable("Subjects_students");
                });

            modelBuilder.Entity("Survey_app.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("End_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Subjects_lecturers_Id")
                        .HasColumnType("int");

                    b.Property<int>("Survey_status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Subjects_lecturers_Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Survey_app.Models.Survey_answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Answer_type_Id")
                        .HasColumnType("int");

                    b.Property<int>("Users_Id")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Answer_type_Id");

                    b.HasIndex("Users_Id");

                    b.ToTable("Survey_answers");
                });

            modelBuilder.Entity("Survey_app.Models.Survey_questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Questions_Id")
                        .HasColumnType("int");

                    b.Property<int>("Survey_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Questions_Id");

                    b.HasIndex("Survey_Id");

                    b.ToTable("Survey_questions");
                });

            modelBuilder.Entity("Survey_app.Models.University_campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("University_campuses");
                });

            modelBuilder.Entity("Survey_app.Models.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Person_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Person_Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers", b =>
                {
                    b.HasOne("Survey_app.Models.Lecturers_post", "Lecturers_post")
                        .WithMany()
                        .HasForeignKey("Lecturers_post_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturers_post");
                });

            modelBuilder.Entity("Survey_app.Models.Questions_answers", b =>
                {
                    b.HasOne("Survey_app.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("Questions_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Survey_answers", "Survey_answers")
                        .WithMany()
                        .HasForeignKey("Survey_answers_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");

                    b.Navigation("Survey_answers");
                });

            modelBuilder.Entity("Survey_app.Models.Students", b =>
                {
                    b.HasOne("Survey_app.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Students_groups", "Students_groups")
                        .WithMany()
                        .HasForeignKey("Students_groups_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Students_groups");
                });

            modelBuilder.Entity("Survey_app.Models.Students_groups", b =>
                {
                    b.HasOne("Survey_app.Models.University_campus", "University_campus")
                        .WithMany()
                        .HasForeignKey("University_campus_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University_campus");
                });

            modelBuilder.Entity("Survey_app.Models.Subjects_lecturers", b =>
                {
                    b.HasOne("Survey_app.Models.Lecturers", "Lecturers")
                        .WithMany("Subjects")
                        .HasForeignKey("Lecturers_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("Subject_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturers");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Survey_app.Models.Subjects_students", b =>
                {
                    b.HasOne("Survey_app.Models.Students_groups", "Students_groups")
                        .WithMany()
                        .HasForeignKey("Students_groups_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Subjects_lecturers", "Subjects_lecturers")
                        .WithMany()
                        .HasForeignKey("Subjects_lecturers_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Students_groups");

                    b.Navigation("Subjects_lecturers");
                });

            modelBuilder.Entity("Survey_app.Models.Survey", b =>
                {
                    b.HasOne("Survey_app.Models.Subjects_lecturers", "Subjects_lecturers")
                        .WithMany()
                        .HasForeignKey("Subjects_lecturers_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subjects_lecturers");
                });

            modelBuilder.Entity("Survey_app.Models.Survey_answers", b =>
                {
                    b.HasOne("Survey_app.Models.Answer_type", "Answer_type")
                        .WithMany()
                        .HasForeignKey("Answer_type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Users_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer_type");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Survey_app.Models.Survey_questions", b =>
                {
                    b.HasOne("Survey_app.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("Questions_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Survey", "Survey")
                        .WithMany("Survey_question")
                        .HasForeignKey("Survey_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Survey_app.Models.Users", b =>
                {
                    b.HasOne("Survey_app.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Survey_app.Models.Survey", b =>
                {
                    b.Navigation("Survey_question");
                });
#pragma warning restore 612, 618
        }
    }
}
