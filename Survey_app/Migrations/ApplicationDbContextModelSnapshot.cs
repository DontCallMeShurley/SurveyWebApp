// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survey_app.Data;

#nullable disable

namespace Survey_app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Survey_app.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyAnswersId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("SurveyAnswersId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("Survey_app.Models.AnswerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AnswerTypes");
                });

            modelBuilder.Entity("Survey_app.Models.Exceptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExceptionType")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Exceptions");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LecturersPostId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SexType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturersPostId");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("Survey_app.Models.LecturersPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LecturersPosts");
                });

            modelBuilder.Entity("Survey_app.Models.MultiAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyAnswersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("SurveyAnswersId");

                    b.ToTable("MultiAnswer");
                });

            modelBuilder.Entity("Survey_app.Models.MultiValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MultiAnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultiAnswerId");

                    b.ToTable("MultiValue");
                });

            modelBuilder.Entity("Survey_app.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RolesTypes")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SexType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Survey_app.Models.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionTypes")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Survey_app.Models.QuestionsOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionsOptions");
                });

            modelBuilder.Entity("Survey_app.Models.Students", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentsGroupsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("StudentsGroupsId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Survey_app.Models.StudentsGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UniversityCampusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UniversityCampusId");

                    b.ToTable("StudentsGroups");
                });

            modelBuilder.Entity("Survey_app.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Survey_app.Models.SubjectsLecturers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LecturersId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LecturersId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectsLecturers");
                });

            modelBuilder.Entity("Survey_app.Models.SubjectsStudents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("StudentsGroupsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsLecturersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentsGroupsId");

                    b.HasIndex("SubjectsLecturersId");

                    b.ToTable("SubjectsStudents");
                });

            modelBuilder.Entity("Survey_app.Models.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectsLecturersId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyStatus")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectsLecturersId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Survey_app.Models.SurveyAnswers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("Survey_app.Models.UniversityCampus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("UniversityCampuses");
                });

            modelBuilder.Entity("Survey_app.Models.Answer", b =>
                {
                    b.HasOne("Survey_app.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("Survey_app.Models.SurveyAnswers", "SurveyAnswers")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");

                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("Survey_app.Models.Exceptions", b =>
                {
                    b.HasOne("Survey_app.Models.Questions", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers", b =>
                {
                    b.HasOne("Survey_app.Models.LecturersPost", "LecturersPost")
                        .WithMany()
                        .HasForeignKey("LecturersPostId");

                    b.Navigation("LecturersPost");
                });

            modelBuilder.Entity("Survey_app.Models.MultiAnswer", b =>
                {
                    b.HasOne("Survey_app.Models.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("Survey_app.Models.SurveyAnswers", "SurveyAnswers")
                        .WithMany("MultiAnswers")
                        .HasForeignKey("SurveyAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");

                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("Survey_app.Models.MultiValue", b =>
                {
                    b.HasOne("Survey_app.Models.MultiAnswer", "MultiAnswer")
                        .WithMany("Values")
                        .HasForeignKey("MultiAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiAnswer");
                });

            modelBuilder.Entity("Survey_app.Models.Questions", b =>
                {
                    b.HasOne("Survey_app.Models.Survey", "Survey")
                        .WithMany("SurveyQuestion")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Survey_app.Models.QuestionsOptions", b =>
                {
                    b.HasOne("Survey_app.Models.Questions", "Question")
                        .WithMany("QuestionsOptions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Survey_app.Models.Students", b =>
                {
                    b.HasOne("Survey_app.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.StudentsGroups", "StudentsGroups")
                        .WithMany()
                        .HasForeignKey("StudentsGroupsId");

                    b.Navigation("Person");

                    b.Navigation("StudentsGroups");
                });

            modelBuilder.Entity("Survey_app.Models.StudentsGroups", b =>
                {
                    b.HasOne("Survey_app.Models.UniversityCampus", "UniversityCampus")
                        .WithMany()
                        .HasForeignKey("UniversityCampusId");

                    b.Navigation("UniversityCampus");
                });

            modelBuilder.Entity("Survey_app.Models.SubjectsLecturers", b =>
                {
                    b.HasOne("Survey_app.Models.Lecturers", "Lecturers")
                        .WithMany("Subjects")
                        .HasForeignKey("LecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturers");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Survey_app.Models.SubjectsStudents", b =>
                {
                    b.HasOne("Survey_app.Models.StudentsGroups", "StudentsGroups")
                        .WithMany()
                        .HasForeignKey("StudentsGroupsId");

                    b.HasOne("Survey_app.Models.SubjectsLecturers", "SubjectsLecturers")
                        .WithMany()
                        .HasForeignKey("SubjectsLecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentsGroups");

                    b.Navigation("SubjectsLecturers");
                });

            modelBuilder.Entity("Survey_app.Models.Survey", b =>
                {
                    b.HasOne("Survey_app.Models.SubjectsLecturers", "SubjectsLecturers")
                        .WithMany()
                        .HasForeignKey("SubjectsLecturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectsLecturers");
                });

            modelBuilder.Entity("Survey_app.Models.SurveyAnswers", b =>
                {
                    b.HasOne("Survey_app.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survey_app.Models.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("Survey_app.Models.Lecturers", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Survey_app.Models.MultiAnswer", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("Survey_app.Models.Questions", b =>
                {
                    b.Navigation("QuestionsOptions");
                });

            modelBuilder.Entity("Survey_app.Models.Survey", b =>
                {
                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Survey_app.Models.SurveyAnswers", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("MultiAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
